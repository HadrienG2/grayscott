[package]
name = "livesim"
version.workspace = true
edition.workspace = true

[features]
# Compute backends
#
# You must enable at least one of these. If you enable several of them, we'll
# use the best backend among those enabled.
compute_autovec = ["compute_selector/compute_autovec"]
compute_block = ["compute_selector/compute_block"]
compute_gpu_naive = ["compute_selector/compute_gpu_naive", "gpu"]
compute_gpu_specialized = ["compute_selector/compute_gpu_specialized", "gpu"]
compute_manualvec = ["compute_selector/compute_manualvec"]
compute_naive = ["compute_selector/compute_naive"]
compute_parallel = ["compute_selector/compute_parallel"]
compute_regular = ["compute_selector/compute_regular"]

# Annotate GPU-side objects with a useful name for debuggers, profilers...
# Requires the VK_EXT_debug_utils extension, will cause a little overhead
gpu-debug-utils = ["compute/gpu-debug-utils"]

# Truth that the active backend is a GPU backend
#
# Used for vulkan context sharing and data locality optimizations. Automatically
# enabled for relevant backends. Once Rust gets specialization, we'll use
# that as a cleaner alternative to this dirty cargo features trick.
gpu = ["data/gpu"]

[dependencies]
anyhow.workspace = true
clap.workspace = true
compute = { workspace = true, features = ["livesim"] }
compute_selector.workspace = true
data.workspace = true
env_logger.workspace = true
log.workspace = true
ndarray.workspace = true
ui = { workspace = true, features = ["simulation", "visualization"] }
vulkano.workspace = true
vulkano-shaders.workspace = true
vulkano-win.workspace = true
winit.workspace = true

[dev-dependencies]
# Needed in order not to break rust-analyzer
compute_selector = { workspace = true, features = ["compute_naive"] }

# Criterion workaround for lack of stable benchmark harness
[[bin]]
name = "livesim"
path = "src/main.rs"
bench = false
