[package]
name = "data"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[features]
# hdf5 I/O support
hdf5 = ["dep:hdf5-metno"]

# GPU storage backend
gpu = ["self_cell", "thiserror", "vulkano"]

# Annotate GPU-side objects with a useful name for debuggers, profilers...
# Requires the VK_EXT_debug_utils extension, will cause a little overhead
gpu-debug-utils = ["gpu"]

# Make it possible to upload simulation parameters to a GPU buffer
gpu-parameters = ["bytemuck", "crevice", "gpu"]

# SIMD storage backends
safe_arch = ["simd", "dep:safe_arch"]
slipstream = ["simd", "dep:slipstream"]

# Commonalities between SIMD backends (automatically enabled by above backends)
simd = []

# Switch to run-time stencil weights lookup
#
# By default, the compiler leverages the fact that stencil weights are known at
# compile time to produce more efficient code. If you would like to know how
# expensive it would be to give up on this specialization and use generic code
# that works for any set of stencil weights, turn on this feature flag.
weights-runtime = []

# Use the five-points discrete Laplacian stencil
#
# By default, we use the Oono-Puri 9-points discrete Laplacian stencil, which is
# optimally isotropic. The 5-points stencil is easier to compute, but exibits a
# lot more anisotropy, which will make the simulation domain more square-shaped
# than circular as it should be.
weights-5points = []

# Use the Patra-Karttunen discrete Laplacian stencil
#
# Gives the best approximation of rotational symmetry and has the smallest error
# around the origin.
#
# Takes precedence over weights-5points.
weights-patrakarttunen = []

# Use the discrete Laplacian stencil that the C++ version uses by default
#
# Mathematically wrong (ignores the fact that diagonal neighbors are at higher
# distance than axial neighbors), but produces visually pleasing results :)
#
# Takes precedence over weights-patrakarttunen and weights-5points.
weights-pretty = []

[dependencies]
cfg-if.workspace = true
ndarray.workspace = true

# HDF5 storage
hdf5-metno = { workspace = true, optional = true }

# SIMD backends
safe_arch = { workspace = true, optional = true }
slipstream = { workspace = true, optional = true }

# GPU backend dependencies
self_cell = { workspace = true, optional = true }
thiserror = { workspace = true, optional = true }
vulkano = { workspace = true, optional = true }

# GPU parameter upload dependencies
bytemuck = { workspace = true, optional = true }
crevice = { workspace = true, optional = true }

# Criterion workaround for lack of stable benchmark harness
[lib]
bench = false
